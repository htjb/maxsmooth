source/chi_dist_example.rst:21: (dir)  which we have changed to 'base_dir='examples/''. These files are essential for
source/chi_dist_example.rst:21: (qp)  without 'data_save=True'. We have also set the 'fit_type' to 'qp' rather than the
source/chi_dist_example.rst:21: (qp)  default 'qp-sign_flipping'. This ensures that all of the available sign
source/chi_dist_example.rst:44: (dir)  We pass the same 'base_dir' as before so that the plotter can find the correct output
source/chi_dist_example.rst:48: (qp)  algorithm and you should use the 'qp' method testing all available sign combinations
source/intro.rst:9: (Bevins)  Harry Thomas Jones Bevins
source/intro.rst:13: (systematics)  highlight systematics left in the data. More generally for DCFs the minimum
source/intro.rst:46: (neighbourhood)  of the sign combinations in the neighbourhood
source/intro.rst:46: (neighbourhood)  that encapsulate enough of the neighbourhood to confidently return the global minimum.
source/maxsmooth.rst:6: (Maxsmooth)  Maxsmooth Example Codes
source/maxsmooth.rst:12: (pre)  There are also examples of functions that can be used pre-fitting and post-fitting
source/maxsmooth.rst:41: (kwargs)  where the kwargs are detailed below. It's resulting attributes can be accessed by writing
source/maxsmooth.rst:23: (params)   and the params. While the
source/maxsmooth.rst:43: (prefactors)   This function defines the prefactors,
source/maxsmooth.rst:63: (args)  . 'args'
source/maxsmooth.rst:67: (len)  , should be an array of dimensions len(x)
source/maxsmooth.rst:81: (args)   in that order and again where 'args' is optional.
source/maxsmooth.rst:81: (params)  'params' is the parameters of the fit, 
source/maxsmooth.rst:124: (prefactor)   and should return the prefactor on the
source/maxsmooth.rst:124: (prefactor)  prefactor on the derivative and an explanation of how the problem is
source/maxsmooth.rst:21: (dir)  which we have changed to 'base_dir='examples/''. These files are essential for
source/maxsmooth.rst:21: (qp)  without 'data_save=True'. We have also set the 'fit_type' to 'qp' rather than the
source/maxsmooth.rst:21: (qp)  default 'qp-sign_flipping'. This ensures that all of the available sign
source/maxsmooth.rst:44: (dir)  We pass the same 'base_dir' as before so that the plotter can find the correct output
source/maxsmooth.rst:48: (qp)  algorithm and you should use the 'qp' method testing all available sign combinations
source/maxsmooth.rst:1: (param)   with the param_plotter() function.
source/maxsmooth.rst:23: (colourmap)  different sign functions in a different colourmap. If the constraints are
source/maxsmooth.rst:23: (colourmap)  a single colourmap. Invalid regions are plotted as black shaded colourmaps
source/maxsmooth.rst:23: (colourmaps)  a single colourmap. Invalid regions are plotted as black shaded colourmaps
source/maxsmooth.rst:44: (labelled)  labelled parameters are varied while the others are maintained at their optimum
source/maxsmooth.rst:43: (Maxsmooth)  Maxsmooth Functions
source/maxsmooth.rst:1: (kwargs)   kwargs that can be assigned to the function which change how
source/maxsmooth.rst:43: (dir)  base_dir: 
source/maxsmooth.rst:62: (cvxopt)  cvxopt_maxiter: 
source/maxsmooth.rst:62: (maxiter)  cvxopt_maxiter: 
source/maxsmooth.rst:66: (params)  initial_params: 
source/maxsmooth.rst:92: (Kwargs)  The following Kwargs can be used by the user to define their own basis
source/maxsmooth.rst:92: (kwarg)  function and will overwrite the 'model_type' kwarg.
source/maxsmooth.rst:135: (params)  .optimum_params: 
source/maxsmooth.rst:145: (rms)  .rms: 
source/maxsmooth.rst:21: (dir)  base_dir: 
source/maxsmooth.rst:62: (chidist)  chidist_plotter()
source/maxsmooth.rst:11: (kwarg)  using the 'data_save = True' kwarg.
source/maxsmooth.rst:19: (dir)  base_dir: 
source/maxsmooth.rst:1: (visualise)   and visualise the constraints with
source/maxsmooth.rst:6: (params)  best_params: 
source/maxsmooth.rst:31: (dir)  base_dir: 
source/maxsmooth.rst:67: (girdlines)  girdlines: 
source/maxsmooth.rst:69: (Kwargs)  The following Kwargs are used to plot the parameter space for a user
source/maxsmooth.rst:69: (kwarg)  defined basis function and will overwrite the 'model_type' kwarg.
source/new_basis_example.rst:23: (params)   and the params. While the
source/new_basis_example.rst:43: (prefactors)   This function defines the prefactors,
source/new_basis_example.rst:63: (args)  . 'args'
source/new_basis_example.rst:67: (len)  , should be an array of dimensions len(x)
source/new_basis_example.rst:81: (args)   in that order and again where 'args' is optional.
source/new_basis_example.rst:81: (params)  'params' is the parameters of the fit, 
source/new_basis_example.rst:124: (prefactor)   and should return the prefactor on the
source/new_basis_example.rst:124: (prefactor)  prefactor on the derivative and an explanation of how the problem is
source/param_plotter_example.rst:1: (param)   with the param_plotter() function.
source/param_plotter_example.rst:23: (colourmap)  different sign functions in a different colourmap. If the constraints are
source/param_plotter_example.rst:23: (colourmap)  a single colourmap. Invalid regions are plotted as black shaded colourmaps
source/param_plotter_example.rst:23: (colourmaps)  a single colourmap. Invalid regions are plotted as black shaded colourmaps
source/param_plotter_example.rst:44: (labelled)  labelled parameters are varied while the others are maintained at their optimum
source/simple_program.rst:41: (kwargs)  where the kwargs are detailed below. It's resulting attributes can be accessed by writing
